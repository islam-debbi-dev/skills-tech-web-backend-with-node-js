<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>لوحة التحكم</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Cairo', sans-serif;
    }
    .tab-content {
      display: none;
    }
    .tab-content.active {
      display: block;
    }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <!-- Header -->
  <header class="bg-blue-600 text-white p-4 shadow-md">
    <div class="container mx-auto flex justify-between items-center">
      <h1 class="text-2xl font-bold">نظام إدارة المشاريع</h1>
      <div class="flex items-center space-x-4 space-x-reverse">
        <span id="user-name" class="font-medium"></span>
        <button id="logout-btn" class="bg-white text-blue-600 px-4 py-1 rounded-lg hover:bg-gray-100">
          تسجيل الخروج
        </button>
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <main class="container mx-auto p-4 mt-6">
    <!-- Tabs -->
    <div class="mb-6 border-b border-gray-200">
      <ul class="flex flex-wrap -mb-px text-sm font-medium text-center">
        <li class="ml-4">
          <button class="tab-btn inline-block p-4 border-b-2 border-blue-600 rounded-t-lg active" data-tab="projects">
            المشاريع المتاحة
          </button>
        </li>
        <li class="ml-4">
          <button class="tab-btn inline-block p-4 border-b-2 border-transparent rounded-t-lg hover:border-gray-300" data-tab="proposals">
            طلباتي
          </button>
        </li>
        <li class="ml-4">
          <button class="tab-btn inline-block p-4 border-b-2 border-transparent rounded-t-lg hover:border-gray-300" data-tab="profile">
            الملف الشخصي
          </button>
        </li>
      </ul>
    </div>

    <!-- Tab Contents -->
    <!-- Projects Tab -->
    <div id="projects-tab" class="tab-content active">
      <h2 class="text-xl font-bold mb-4">المشاريع المتاحة</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="projects-container">
        <!-- Projects will be loaded here -->
        <div class="animate-pulse bg-white p-6 rounded-lg shadow-md">
          <div class="h-6 bg-gray-200 rounded w-3/4 mb-4"></div>
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-10 bg-gray-200 rounded mt-4"></div>
        </div>
      </div>
    </div>

    <!-- Proposals Tab -->
    <div id="proposals-tab" class="tab-content">
      <h2 class="text-xl font-bold mb-4">طلباتي</h2>
      <div class="overflow-x-auto">
        <table class="min-w-full bg-white rounded-lg overflow-hidden shadow-md">
          <thead class="bg-gray-100 text-gray-700">
            <tr>
              <th class="py-3 px-4 text-right">عنوان المشروع</th>
              <th class="py-3 px-4 text-right">الحالة</th>
              <th class="py-3 px-4 text-right">تاريخ التقديم</th>
            </tr>
          </thead>
          <tbody id="proposals-container">
            <!-- Proposals will be loaded here -->
            <tr class="animate-pulse">
              <td class="py-3 px-4"><div class="h-4 bg-gray-200 rounded w-3/4"></div></td>
              <td class="py-3 px-4"><div class="h-4 bg-gray-200 rounded w-1/2"></div></td>
              <td class="py-3 px-4"><div class="h-4 bg-gray-200 rounded w-2/3"></div></td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Profile Tab -->
    <div id="profile-tab" class="tab-content">
      <h2 class="text-xl font-bold mb-4">الملف الشخصي</h2>
      <div class="bg-white p-6 rounded-lg shadow-md">
        <form id="profile-form" class="space-y-4">
          <div>
            <label for="fullName" class="block text-sm font-medium text-gray-700">الاسم الكامل</label>
            <input type="text" id="fullName" name="fullName" 
              class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
          </div>
          <div>
            <label for="username" class="block text-sm font-medium text-gray-700">اسم المستخدم</label>
            <input type="text" id="username" name="username" disabled
              class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 shadow-sm">
          </div>
          <div>
            <label for="role" class="block text-sm font-medium text-gray-700">الدور</label>
            <input type="text" id="role" name="role" disabled
              class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 shadow-sm">
          </div>
          <div>
            <label for="proposalsSubmitted" class="block text-sm font-medium text-gray-700">عدد الطلبات المقدمة</label>
            <input type="text" id="proposalsSubmitted" name="proposalsSubmitted" disabled
              class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 shadow-sm">
          </div>
          <button type="submit"
            class="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
            حفظ التغييرات
          </button>
        </form>
      </div>
    </div>
  </main>

  <!-- Modal for Project Details and Proposal Submission -->
  <div id="project-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md mx-4">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold" id="modal-title"></h3>
        <button id="close-modal" class="text-gray-500 hover:text-gray-700">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div id="modal-content" class="mb-4">
        <!-- Project details will be loaded here -->
      </div>
      <div id="modal-actions" class="flex justify-end">
        <button id="submit-proposal" class="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
          تقديم طلب
        </button>
      </div>
    </div>
  </div>

  <!-- Toast Notification -->
  <div id="toast" class="fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg transform transition-transform duration-300 translate-y-20 opacity-0">
    <span id="toast-message"></span>
  </div>

  <script>
    // Global variables
    let currentUser = null;
    let projects = [];
    let proposals = [];
    let currentProjectId = null;

    // DOM Elements
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    const projectsContainer = document.getElementById('projects-container');
    const proposalsContainer = document.getElementById('proposals-container');
    const profileForm = document.getElementById('profile-form');
    const projectModal = document.getElementById('project-modal');
    const closeModalBtn = document.getElementById('close-modal');
    const submitProposalBtn = document.getElementById('submit-proposal');
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    const logoutBtn = document.getElementById('logout-btn');

    // Check if user is logged in
    function checkAuth() {
      const userId = localStorage.getItem('userId');
      if (!userId) {
        window.location.href = 'login.html';
      }
      return userId;
    }

    // Tab switching functionality
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        
        // Update active tab button
        tabButtons.forEach(btn => {
          btn.classList.remove('active', 'border-blue-600');
          btn.classList.add('border-transparent');
        });
        button.classList.add('active', 'border-blue-600');
        button.classList.remove('border-transparent');
        
        // Show active tab content
        tabContents.forEach(content => {
          content.classList.remove('active');
        });
        document.getElementById(`${tabId}-tab`).classList.add('active');
      });
    });

    // Fetch current user data
    async function fetchCurrentUser() {
      try {
        const userId = checkAuth();
        const response = await fetch(`http://localhost:3000/api/user/me/${userId}`);
        const data = await response.json();
        
        if (data.me) {
          currentUser = data.me;
          document.getElementById('user-name').textContent = currentUser.fullName;
          
          // Fill profile form
          document.getElementById('fullName').value = currentUser.fullName;
          document.getElementById('username').value = currentUser.username;
          document.getElementById('role').value = currentUser.role === 'student' ? 'طالب' : 'أستاذ';
          document.getElementById('proposalsSubmitted').value = currentUser.proposalsSubmitted;
        }
      } catch (error) {
        console.error('Error fetching user data:', error);
        showToast('حدث خطأ أثناء تحميل بيانات المستخدم', 'error');
      }
    }

    // Fetch all projects
    async function fetchProjects() {
      try {
        const response = await fetch('http://localhost:3000/api/project/');
        const data = await response.json();
        
        projects = data;
        renderProjects();
      } catch (error) {
        console.error('Error fetching projects:', error);
        showToast('حدث خطأ أثناء تحميل المشاريع', 'error');
      }
    }

    // Fetch user proposals
    async function fetchProposals() {
      try {
        const userId = checkAuth();
        const response = await fetch(`http://localhost:3000/api/proposal/student?studentId=${userId}`);
        const data = await response.json();
        
        proposals = data;
        renderProposals();
      } catch (error) {
        console.error('Error fetching proposals:', error);
        showToast('حدث خطأ أثناء تحميل الطلبات', 'error');
      }
    }

    // Render projects to the DOM
    function renderProjects() {
      projectsContainer.innerHTML = '';
      
      if (projects.length === 0) {
        projectsContainer.innerHTML = '<p class="col-span-3 text-center text-gray-500">لا توجد مشاريع متاحة حالياً</p>';
        return;
      }
      
      projects.forEach(project => {
        // Check if the user has already submitted a proposal for this project
        const hasProposal = proposals.some(proposal => proposal.projectId === project._id);
        
        const projectCard = document.createElement('div');
        projectCard.className = 'bg-white p-6 rounded-lg shadow-md';
        projectCard.innerHTML = `
          <h3 class="text-lg font-bold mb-2">${project.title}</h3>
          <p class="text-gray-600 mb-4">${project.description}</p>
          <div class="flex justify-between items-center text-sm text-gray-500 mb-4">
            <span>الحالة: <span class="font-medium ${project.status === 'available' ? 'text-green-600' : 'text-red-600'}">${project.status === 'available' ? 'متاح' : 'غير متاح'}</span></span>
            <span>الحد الأقصى للطلاب: ${project.maxStudents}</span>
          </div>
          <button class="view-project w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${hasProposal ? 'opacity-50 cursor-not-allowed' : ''}" 
            data-id="${project._id}" ${hasProposal ? 'disabled' : ''}>
            ${hasProposal ? 'تم تقديم طلب' : 'عرض التفاصيل'}
          </button>
        `;
        
        projectsContainer.appendChild(projectCard);
        
        // Add event listener to view project button
        const viewBtn = projectCard.querySelector('.view-project');
        if (!hasProposal) {
          viewBtn.addEventListener('click', () => openProjectModal(project));
        }
      });
    }

    // Render proposals to the DOM
    function renderProposals() {
      proposalsContainer.innerHTML = '';
      
      if (proposals.length === 0) {
        proposalsContainer.innerHTML = '<tr><td colspan="3" class="py-4 px-4 text-center text-gray-500">لم تقم بتقديم أي طلبات بعد</td></tr>';
        return;
      }
      
      proposals.forEach(async proposal => {
        // Find the project details
        let projectTitle = 'جاري التحميل...';
        try {
          // Find project in already loaded projects
          const project = projects.find(p => p._id === proposal.projectId);
          if (project) {
            projectTitle = project.title;
          } else {
            // If not found, we could fetch it (but for simplicity we'll just show a placeholder)
            projectTitle = 'مشروع #' + proposal.projectId.substring(0, 6);
          }
        } catch (error) {
          console.error('Error getting project details:', error);
        }
        
        const row = document.createElement('tr');
        row.className = 'border-b hover:bg-gray-50';
        row.innerHTML = `
          <td class="py-3 px-4">${projectTitle}</td>
          <td class="py-3 px-4">
            <span class="px-2 py-1 rounded-full text-xs font-medium
              ${proposal.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                proposal.status === 'accepted' ? 'bg-green-100 text-green-800' : 
                'bg-red-100 text-red-800'}">
              ${proposal.status === 'pending' ? 'قيد الانتظار' : 
                proposal.status === 'accepted' ? 'مقبول' : 'مرفوض'}
            </span>
          </td>
          <td class="py-3 px-4">${new Date(proposal.createdAt).toLocaleDateString('ar-SA')}</td>
        `;
        
        proposalsContainer.appendChild(row);
      });
    }

    // Open project modal
    function openProjectModal(project) {
      currentProjectId = project._id;
      document.getElementById('modal-title').textContent = project.title;
      
      const modalContent = document.getElementById('modal-content');
      modalContent.innerHTML = `
        <p class="mb-4">${project.description}</p>
        <div class="grid grid-cols-2 gap-4 text-sm">
          <div>
            <span class="font-medium">الحالة:</span>
            <span class="${project.status === 'available' ? 'text-green-600' : 'text-red-600'}">${project.status === 'available' ? 'متاح' : 'غير متاح'}</span>
          </div>
          <div>
            <span class="font-medium">الحد الأقصى للطلاب:</span>
            <span>${project.maxStudents}</span>
          </div>
          <div>
            <span class="font-medium">الطلاب المسجلين:</span>
            <span>${project.assignedStudents.length}</span>
          </div>
          <div>
            <span class="font-medium">تاريخ الإنشاء:</span>
            <span>${new Date(project.createdAt).toLocaleDateString('ar-SA')}</span>
          </div>
        </div>
      `;
      
      projectModal.classList.remove('hidden');
    }

    // Close project modal
    function closeProjectModal() {
      projectModal.classList.add('hidden');
      currentProjectId = null;
    }

    // Submit proposal
    async function submitProposal() {
      try {
        if (!currentProjectId) return;
        
        const userId = checkAuth();
        const response = await fetch('http://localhost:3000/api/proposal/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            projectId: currentProjectId,
            studentId: userId
          })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          showToast('تم تقديم الطلب بنجاح');
          closeProjectModal();
          
          // Refresh proposals
          await fetchProposals();
          // Refresh projects to update UI
          await fetchProjects();
        } else {
          showToast('حدث خطأ أثناء تقديم الطلب', 'error');
        }
      } catch (error) {
        console.error('Error submitting proposal:', error);
        showToast('حدث خطأ أثناء تقديم الطلب', 'error');
      }
    }

    // Update profile
    async function updateProfile(event) {
      event.preventDefault();
      
      try {
        const userId = checkAuth();
        const fullName = document.getElementById('fullName').value;
        
        // This is a placeholder - your actual API might be different
        const response = await fetch(`http://localhost:3000/api/user/${userId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            fullName
          })
        });
        
        if (response.ok) {
          showToast('تم تحديث الملف الشخصي بنجاح');
          // Update user name in header
          document.getElementById('user-name').textContent = fullName;
        } else {
          showToast('حدث خطأ أثناء تحديث الملف الشخصي', 'error');
        }
      } catch (error) {
        console.error('Error updating profile:', error);
        showToast('حدث خطأ أثناء تحديث الملف الشخصي', 'error');
      }
    }

    // Show toast notification
    function showToast(message, type = 'success') {
      toastMessage.textContent = message;
      toast.classList.remove('translate-y-20', 'opacity-0', 'bg-green-500', 'bg-red-500');
      toast.classList.add(type === 'success' ? 'bg-green-500' : 'bg-red-500');
      
      // Show toast
      setTimeout(() => {
        toast.classList.remove('translate-y-20', 'opacity-0');
      }, 100);
      
      // Hide toast after 3 seconds
      setTimeout(() => {
        toast.classList.add('translate-y-20', 'opacity-0');
      }, 3000);
    }

    // Logout function
    function logout() {
      localStorage.removeItem('userId');
      window.location.href = '/api/page/login';
    }

    // Event Listeners
    document.addEventListener('DOMContentLoaded', async () => {
      await fetchCurrentUser();
      await fetchProjects();
      await fetchProposals();
    });

    closeModalBtn.addEventListener('click', closeProjectModal);
    submitProposalBtn.addEventListener('click', submitProposal);
    profileForm.addEventListener('submit', updateProfile);
    logoutBtn.addEventListener('click', logout);

    // Close modal when clicking outside
    projectModal.addEventListener('click', (event) => {
      if (event.target === projectModal) {
        closeProjectModal();
      }
    });
  </script>
</body>
</html>